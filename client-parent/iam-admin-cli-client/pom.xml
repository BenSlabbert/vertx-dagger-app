<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.example.parent</groupId>
    <artifactId>client-parent</artifactId>
    <version>${revision}</version>
  </parent>

  <groupId>com.example.client.admincli</groupId>
  <artifactId>iam-admin-cli-client</artifactId>

  <properties>
    <finalName>iam-admin-cli-client</finalName>
    <exec.mainClass>com.example.client.admincli.Main</exec.mainClass>

    <!--or native-->
    <testImageTag>jvm</testImageTag>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.google.dagger</groupId>
      <artifactId>dagger</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.dagger</groupId>
      <artifactId>dagger-compiler</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>info.picocli</groupId>
      <artifactId>picocli</artifactId>
    </dependency>
    <dependency>
      <groupId>com.example.starter</groupId>
      <artifactId>starter-iam-auth-client</artifactId>
      <version>${revision}</version>
    </dependency>
    <dependency>
      <groupId>com.google.auto.value</groupId>
      <artifactId>auto-value-annotations</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>info.picocli</groupId>
      <artifactId>picocli-codegen</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <scope>runtime</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>${finalName}</finalName>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <useIncrementalCompilation>false</useIncrementalCompilation>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <release>${java.version}</release>
          <parameters>true</parameters>
          <encoding>${project.build.sourceEncoding}</encoding>
          <compilerArgs>
            <arg>-parameters</arg>
            <arg>-Aproject=${project.groupId}/${project.artifactId}</arg>
            <arg>-Adagger.formatGeneratedSource=enabled</arg>
            <arg>-Adagger.fullBindingGraphValidation=ERROR</arg>
            <arg>-Adagger.ignoreProvisionKeyWildcards=ENABLED</arg>
            <arg>-Adagger.fastInit=enabled</arg>
            <!--required by ErrorProne-->
            <arg>-XDcompilePolicy=simple</arg>
            <arg>-Xplugin:ErrorProne</arg>
            <arg>-Acom.google.auto.value.AutoBuilderIsUnstable=true</arg>
          </compilerArgs>
          <annotationProcessorPaths>
            <path>
              <groupId>info.picocli</groupId>
              <artifactId>picocli-codegen</artifactId>
              <version>${picocli.version}</version>
            </path>
            <path>
              <groupId>com.google.auto.value</groupId>
              <artifactId>auto-value</artifactId>
              <version>${google-auto-value.version}</version>
            </path>
            <path>
              <groupId>com.google.errorprone</groupId>
              <artifactId>error_prone_core</artifactId>
              <version>${errorprone.version}</version>
            </path>
            <path>
              <groupId>com.google.dagger</groupId>
              <artifactId>dagger-compiler</artifactId>
              <version>${dagger.version}</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <includeScope>compile</includeScope>
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <classpathPrefix>lib/</classpathPrefix>
              <mainClass>${exec.mainClass}</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>${exec.mainClass}</Main-Class>
                    <X-Compile-Source-JDK>${java.version}</X-Compile-Source-JDK>
                    <X-Compile-Target-JDK>${java.version}</X-Compile-Target-JDK>
                  </manifestEntries>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <forkCount>1C</forkCount>
          <reuseForks>true</reuseForks>
          <!--Workaround when running tests with Java 21, can be removed once the mockito/bytebuddy issue is fixed, see https://github.com/mockito/mockito/issues/3121-->
          <systemPropertyVariables>
            <systemPropertyVariables>
              <net.bytebuddy.experimental>true</net.bytebuddy.experimental>
            </systemPropertyVariables>
            <property>
              <name>imageTag</name>
              <value>${testImageTag}</value>
            </property>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>docker-build</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <skip>${docker.skip}</skip>
              <executable>docker</executable>
              <workingDirectory>${project.basedir}</workingDirectory>
              <arguments>
                <argument>buildx</argument>
                <argument>build</argument>
                <argument>.</argument>
                <argument>-t</argument>
                <argument>${finalName}:jvm-latest</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>native</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.graalvm.buildtools</groupId>
            <artifactId>native-maven-plugin</artifactId>
            <configuration>
              <!--name of the output binary-->
              <imageName>${finalName}</imageName>
              <mainClass>${exec.mainClass}</mainClass>
              <buildArgs>
                <buildArg>--strict-image-heap</buildArg>
                <buildArg>-march=native</buildArg>
                <buildArg>-H:+UnlockExperimentalVMOptions</buildArg>
                <buildArg>-H:Optimize=${nativeImageOptimizationLevel}</buildArg>
                <buildArg>--gc=serial</buildArg>
                <buildArg>--initialize-at-run-time=io.netty.handler.codec.compression.ZstdOptions,io.netty.handler.ssl.BouncyCastleAlpnSslUtils</buildArg>
                <buildArg>--install-exit-handlers</buildArg>
                <buildArg>-H:+TraceSecurityServices</buildArg>
                <buildArg>--enable-http</buildArg>
                <buildArg>--enable-https</buildArg>
                <buildArg>-H:EnableURLProtocols=http,https</buildArg>
                <buildArg>--report-unsupported-elements-at-runtime</buildArg>
                <buildArg>-H:+PrintClassInitialization</buildArg>
                <buildArg>-H:+ReportExceptionStackTraces</buildArg>
                <buildArg>-H:+IncludeAllLocales</buildArg>
                <buildArg>-H:+BuildReport</buildArg>
                <buildArg>--enable-sbom</buildArg>
                <buildArg>--verbose</buildArg>
                <buildArg>--static</buildArg>
                <buildArg>--libc=musl</buildArg>
                <!--https://www.graalvm.org/22.0/reference-manual/native-image/MemoryManagement/#java-heap-size-->
                <!--preconfigure memory if not set-->
                <buildArg>-H:+AddAllCharsets</buildArg>
                <buildArg>-R:MinHeapSize=32m</buildArg>
                <buildArg>-R:MaxHeapSize=32m</buildArg>
                <buildArg>-R:MaxNewSize=16m</buildArg>
              </buildArgs>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>compile-no-fork</goal>
                </goals>
                <phase>package</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
